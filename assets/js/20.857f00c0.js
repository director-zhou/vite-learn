(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{378:function(t,s,a){"use strict";a.r(s);var n=a(23),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("在构建文件处理(一)的部分中, 已经对入口文件和入口文件中的引入模块的方式进行了 "),a("code",[t._v("过滤")]),t._v(" 和 "),a("code",[t._v("分配了虚拟空间")]),t._v(" 待构建时对文件的内容通过"),a("code",[t._v("onLoad")]),t._v("进行处理。")]),t._v(" "),a("h2",{attrs:{id:"onload-转换入口文件-生成入口代理模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#onload-转换入口文件-生成入口代理模块"}},[t._v("#")]),t._v(" "),a("code",[t._v("onLoad")]),t._v(" 转换入口文件,生成入口代理模块")]),t._v(" "),a("p",[t._v("对于入口文件, 将进行读取并构造一个代理模块，因为实际模块可能会通过相对导入引用-如果我们不分离代理和实际的模块, "),a("code",[t._v("esbuild")]),t._v("将创建相同的副本模块！")]),t._v(" "),a("p",[t._v("所有依赖的入口模块都被 "),a("code",[t._v("onResolve")]),t._v(" 分配到 "),a("code",[t._v("dep")]),t._v(" 命名空间中，处理时将会调用 "),a("code",[t._v("onLoad")]),t._v(" 拦截进行模块代理, 模块代理的原理就是将原本的入口模块中所有的内容导出方式，将在外面代理一层，在代理模块中引入原本入口文件的导出内容, 将原本的入口文件视代理模块的内部导入模块。")]),t._v(" "),a("p",[t._v("模块代理示例:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 原本入口模块的模块:")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./a.js'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("demo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("'helloWorld"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" demo\n")])])]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代理模块的改造")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" d "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'相对于 root 的原入口模块解析路径'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'相对于 root 的原入口模块解析路径'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" d\n")])])]),a("p",[t._v("由此代理模块变成了入口模块。构建主入口就成了代理模块为起启构建入口。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("build"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onLoad")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" filter"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v(".*")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" namespace"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dep'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" path"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" id "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[a("code",[t._v("onLoad")]),t._v(" 拦截 "),a("code",[t._v("namespance")]),t._v(" 为 "),a("code",[t._v("dep")]),t._v(" 分配虚拟空间模块(即为构建入口模块), 这里将会拦截所有入口文件进行生成代理改造。")]),t._v(" "),a("blockquote",[a("p",[t._v("生成相对路径")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" root "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" entryFile "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" qualified"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" relativePath "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("normalizePath")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("relative")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("root"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" entryFile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("relativePath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("startsWith")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  relativePath "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("./")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("relativePath"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("声明 "),a("code",[t._v("root")]),t._v(" 变量, 则为 "),a("code",[t._v("vite.config")]),t._v(" 配置的值。否就是 "),a("code",[t._v("process.cwd()")]),t._v("。")]),t._v(" "),a("p",[t._v("声明 "),a("code",[t._v("entryFile")]),t._v(" 变量，通过已收集展平化后的依赖对象通过 "),a("code",[t._v("id")]),t._v(" 进行寻找对应的入口模块路径，此时的 "),a("code",[t._v("id")]),t._v(" 是进行展后化后过的，在 "),a("code",[t._v("onResolve")]),t._v(" 并没有返回绝对路径,返回则是原始 "),a("code",[t._v("id")]),t._v("。")]),t._v(" "),a("p",[t._v("声明 "),a("code",[t._v("relativePath")]),t._v(" 变量，则为代理模块导入入口文件时的模块名称(路径名称) "),a("code",[t._v("import XXX from 'XXX'")]),t._v(", 通过 "),a("code",[t._v("path.relative")]),t._v(" 基于 "),a("code",[t._v("root")]),t._v(" 和 "),a("code",[t._v("entryFile")]),t._v(" 得出相对的路径。")]),t._v(" "),a("p",[t._v("此时得出的相对路径会缺少 "),a("code",[t._v("./")]),t._v(",需要加上 "),a("code",[t._v("./")]),t._v(" 形成一个完整合法的相对路径。")]),t._v(" "),a("h3",{attrs:{id:"获取构建前准备内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取构建前准备内容"}},[t._v("#")]),t._v(" 获取构建前准备内容")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" contents "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" exportsData"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("imports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" exports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" data\n")])])]),a("p",[t._v("声明 "),a("code",[t._v("content")]),t._v(" 变量，用存储放代理模块转化后的内容。")]),t._v(" "),a("p",[t._v("声明 "),a("code",[t._v("data")]),t._v(" 变量,"),a("code",[t._v("exportsData")]),t._v(" 对象存放着每个入口文件中解析后的基于 "),a("code",[t._v("es-module-lexer")]),t._v(" 词法分析后的内容。")]),t._v(" "),a("p",[t._v("通过 "),a("code",[t._v("data")]),t._v(" 可以获得当前模块词法分析结果后 "),a("code",[t._v("import")]),t._v(" 部分的描述，和 "),a("code",[t._v("exports")]),t._v(" 的描述。")]),t._v(" "),a("h3",{attrs:{id:"输出-cjs-代理内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#输出-cjs-代理内容"}},[t._v("#")]),t._v(" 输出 "),a("code",[t._v("cjs")]),t._v(" 代理内容")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("imports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("exports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// cjs")]),t._v("\n  contents "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('export default require("')]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("relativePath"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('");')]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("如果没有 "),a("code",[t._v("imports")]),t._v(" 同时也没有 "),a("code",[t._v("exports")]),t._v(" 说明肯定不是 "),a("code",[t._v("esm")]),t._v(" 导入导出的写法,必然是 "),a("code",[t._v("cjs")]),t._v(" 或者 "),a("code",[t._v("umd")]),t._v(" 的写法,直接通过 "),a("code",[t._v("export default require(相对于root的入口路径模块)")])]),t._v(" "),a("h3",{attrs:{id:"输出-esm-代理内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#输出-esm-代理内容"}},[t._v("#")]),t._v(" 输出 "),a("code",[t._v("esm")]),t._v(" 代理内容")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("includes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'default'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  contents "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('import d from "')]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("relativePath"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('";export default d;')]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hasReExports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("\n  exports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("\n  exports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'default'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  contents "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\\nexport * from "')]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("relativePath"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("code",[t._v("esm")]),t._v(" 的编写方式，同时可以单个导出，也可以进行多个进行导出。")]),t._v(" "),a("p",[t._v("单个导出, "),a("code",[t._v("exports")]),t._v(" 词法解析中就会存在 "),a("code",[t._v("deafult")]),t._v(" 值, 进行单个导入导出 "),a("code",[t._v('import d from "相对于root的入口路径模块";export default d;')]),t._v("。")]),t._v(" "),a("p",[t._v("多个导出, 可以有几下三种情况都会存在有多个导出方式:")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("export { a } from 'XXX'")]),t._v(" 这种方法在 "),a("code",[t._v("import")]),t._v(" 词在分析的数组上添加 "),a("code",[t._v("hasReExports")]),t._v(" 为 "),a("code",[t._v("true")]),t._v("。")]),t._v(" "),a("li",[a("code",[t._v("exports")]),t._v(" 部分只要长度大于 "),a("code",[t._v("1")]),t._v(", 也证明有导出内容，为什么要大于 "),a("code",[t._v("1")]),t._v("，因为只是单纯的 "),a("code",[t._v("export default")]),t._v(", "),a("code",[t._v("exports")]),t._v(" 词法分析的内容中会只会存在 "),a("code",[t._v("default")]),t._v(" 值。")]),t._v(" "),a("li",[t._v("如果存在多个导出内容，同时第一项不是 "),a("code",[t._v("default")]),t._v(", 说明肯定有多个导出的存在。")])]),t._v(" "),a("p",[t._v("存在的情况下，在代码模块中使用 "),a("code",[t._v("export * from '相对于root的入口路径模块'")]),t._v(", 这样就可以把入口模块中的所有多模块导出的全导入进代理模块中。")]),t._v(" "),a("h3",{attrs:{id:"返回结果"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#返回结果"}},[t._v("#")]),t._v(" 返回结果")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" ext "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("extname")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("entryFile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ext "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'mjs'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ext "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'js'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  loader"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ext "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" Loader"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  contents"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  resolveDir"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" root\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("返回时在对象中传传三个属性:")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("loader")]),t._v(" 返回的解析文件类型, 通过 "),a("code",[t._v("path.extname")]),t._v(" 拿到入口文件的后缀类型，如果是 "),a("code",[t._v(".mjs")]),t._v(" 则当作 "),a("code",[t._v(".js")]),t._v("。")]),t._v(" "),a("li",[a("code",[t._v("content")]),t._v(" 是代码模块的内容。")]),t._v(" "),a("li",[a("code",[t._v("resolveDir")]),t._v(" 是必传的, 对于代理模块而言，里面的导入模块对于 "),a("code",[t._v("esbuild")]),t._v(" 是不知道的基于那个位置相对寻找, 正因 "),a("code",[t._v("relativePath")]),t._v(" 是为 "),a("code",[t._v("root")]),t._v(" 相对获得的，所以 "),a("code",[t._v("resolveDir")]),t._v(" 则使用 "),a("code",[t._v("root")]),t._v(",这个可以确保 "),a("code",[t._v("esbuild")]),t._v(" 可以正确的找到导入模块的文件位置。")])]),t._v(" "),a("h2",{attrs:{id:"onload-转换不存在的模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#onload-转换不存在的模块"}},[t._v("#")]),t._v(" onLoad 转换不存在的模块")]),t._v(" "),a("p",[t._v("没有被resolve插件解析到的模块入口文件路径, 将被 "),a("code",[t._v("onResolved")]),t._v(" 分配到 "),a("code",[t._v("browser-external")]),t._v(" 虚拟命名空间中。此时会被以下 "),a("code",[t._v("onLoad")]),t._v(" 进行拦截。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("build"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onLoad")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" filter"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v(".*")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" namespace"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'browser-external'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" path"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" id "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("拦截条件为在 "),a("code",[t._v("onResolved")]),t._v(" 解析模块时返回时 "),a("code",[t._v("namespace")]),t._v(" 为 "),a("code",[t._v("browser-external")]),t._v(" 的导入模块。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\ncontents"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("export default new Proxy({}, {\n  get() {\n  throw new Error('Module \"")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" has been externalized for ')]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("browser compatibility and cannot be accessed in client code.')\n  }\n})")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("构建时内部返回一个代理对象, 如果调用代理对象任何属于，将进行提示模块 "),a("code",[t._v("id")]),t._v(" 已外部化以实现浏览器兼容性，无法在客户端代码中访问。")])])}),[],!1,null,null,null);s.default=e.exports}}]);