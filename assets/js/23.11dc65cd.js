(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{381:function(s,t,a){"use strict";a.r(t);var e=a(23),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"文档介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文档介绍"}},[s._v("#")]),s._v(" 文档介绍")]),s._v(" "),a("p",[s._v("如果没有找到相应的缓存，"),a("strong",[s._v("Vite")]),s._v(" 将抓取你的源码，并自动寻找引入的依赖项（即 "),a("strong",[s._v('"bare import"')]),s._v("，表示期望从 "),a("strong",[s._v("node_modules")]),s._v(" 解析），并将这些依赖项作为预构建包的入口点。预构建通过 "),a("strong",[s._v("esbuild")]),s._v(" 执行，所以它通常非常快。")]),s._v(" "),a("p",[s._v("在服务器已经启动之后，如果遇到一个新的依赖关系导入，而这个依赖关系还没有在缓存中，"),a("strong",[s._v("Vite")]),s._v(" 将重新运行依赖构建进程并重新加载页面。")]),s._v(" "),a("h3",{attrs:{id:"理解文档函意。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#理解文档函意。"}},[s._v("#")]),s._v(" 理解文档函意。")]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("vite")]),s._v(" 扫描时收集的构建依赖目录是从 "),a("strong",[s._v("node_modules")]),s._v(" 包中导入的模块。")]),s._v(" "),a("li",[s._v("通过 "),a("strong",[s._v("esbuild")]),s._v(" 进行构建, 同时收集构建依赖也是通过 "),a("strong",[s._v("esbuild")]),s._v(" 利用文件解析方式。")])]),s._v(" "),a("h2",{attrs:{id:"扫描器函数-scanimports"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扫描器函数-scanimports"}},[s._v("#")]),s._v(" 扫描器函数 "),a("code",[s._v("scanImports")])]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" deps"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Record"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" string"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" missing"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Record"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" string"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("newDeps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" deps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" missing "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("await")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("scanImports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  deps "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" newDeps\n  missing "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[a("code",[s._v("scanImports")]),s._v(" 是扫描器执行函数, 从这里正式开启扫描。")]),s._v(" "),a("h3",{attrs:{id:"deps、-missing-变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deps、-missing-变量"}},[s._v("#")]),s._v(" "),a("code",[s._v("deps")]),s._v("、 "),a("code",[s._v("missing")]),s._v(" 变量")]),s._v(" "),a("ol",[a("li",[a("code",[s._v("deps")]),s._v(" 存储扫描后需要预构建的依赖, 在 "),a("code",[s._v("node_modules")]),s._v(" 寻找到对应的构建文件入口。")]),s._v(" "),a("li",[a("code",[s._v("missing")]),s._v(" 存储扫描后的需要构建的依赖, 但是并没在 "),a("code",[s._v("node_modules")]),s._v(" 寻找对应的构建文件入口，成为一个缺失的依赖。")])]),s._v(" "),a("h3",{attrs:{id:"newdeps-参数理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#newdeps-参数理解"}},[s._v("#")]),s._v(" "),a("code",[s._v("newDeps")]),s._v(" 参数理解")]),s._v(" "),a("p",[a("code",[s._v("newDeps")]),s._v(" 是 "),a("code",[s._v("optimizeDeps")]),s._v(" 构建入口方法传入的参数, 如果存在 "),a("code",[s._v("newDeps")]),s._v(" 说明是在服务器启动后, 加载导入的模块时, 遇到需要构建依赖模块时, 此时这个依赖关系并没有在构建结果元信息中被找到。将执行"),a("RouterLink",{attrs:{to:"/depedency/预构建执行逻辑.html#加载资源时优化的执行机制"}},[s._v("加载资源时优化的执行逻辑")]),s._v("后, 再次调用 "),a("code",[s._v("optimizeDeps")]),s._v(" 传入收集后合并后的依赖模块 "),a("strong",[s._v("(最终的依赖关系 === 已知的依赖和新的依赖)")]),s._v("。")],1),s._v(" "),a("p",[s._v("所以当没有 "),a("code",[s._v("newDeps")]),s._v(" 时, 将进行依赖扫描, 得到 "),a("code",[s._v("deps")]),s._v(" 和 "),a("code",[s._v("missing")]),s._v("。")]),s._v(" "),a("h2",{attrs:{id:"扫描流程图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扫描流程图"}},[s._v("#")]),s._v(" 扫描流程图")]),s._v(" "),a("p",[s._v("尽请期待...")])])}),[],!1,null,null,null);t.default=n.exports}}]);